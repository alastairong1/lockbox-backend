name: CI

on:
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      dynamodb-local:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        # Use curl GET health check which should return a 400 response
        options: >-
          --health-cmd "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8000 | grep 400 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 5s

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy
        target: x86_64-unknown-linux-musl
    
    - name: Check AWS CLI and install if needed
      run: |
        if aws --version &> /dev/null; then
          echo "AWS CLI is already installed"
          aws --version
        else
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
        fi
        # Install curl for health check
        sudo apt-get update
        sudo apt-get install -y curl
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    - name: Check code formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
    
    - name: Setup DynamoDB Local
      run: |
        # Verify DynamoDB is running with curl
        echo "Checking if DynamoDB Local is ready..."
        status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000)
        if [ "$status_code" = "400" ]; then
          echo "DynamoDB Local is running correctly (received 400 status code)"
        else
          echo "Error: DynamoDB Local is not responding correctly. Status code: $status_code"
          exit 1
        fi
        
        # Create test table
        aws dynamodb create-table \
          --table-name box-table \
          --attribute-definitions AttributeName=id,AttributeType=S AttributeName=owner_id,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --global-secondary-indexes 'IndexName=owner_id-index,KeySchema=[{AttributeName=owner_id,KeyType=HASH}],Projection={ProjectionType=ALL}' \
          --endpoint-url http://localhost:8000 \
          --region eu-west-2
        
        # Verify table was created
        aws dynamodb list-tables --endpoint-url http://localhost:8000 --region eu-west-2
        echo "Test table created in DynamoDB Local"
      env:
        AWS_ACCESS_KEY_ID: fakeMyKeyId
        AWS_SECRET_ACCESS_KEY: fakeSecretAccessKey
    
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose
      env:
        DYNAMODB_TABLE: box-table
        AWS_REGION: eu-west-2
        AWS_ACCESS_KEY_ID: fakeMyKeyId
        AWS_SECRET_ACCESS_KEY: fakeSecretAccessKey
        AWS_ENDPOINT_URL: http://localhost:8000
