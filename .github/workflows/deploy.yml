name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install musl-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build Lambda Package
        run: |
          # Build the main application with the release profile
          cargo build --release --target x86_64-unknown-linux-musl
          
          # Box Service
          cp target/x86_64-unknown-linux-musl/release/lockbox-box-service bootstrap
          zip box-service.zip bootstrap
          
          # Invitation Service
          cp target/x86_64-unknown-linux-musl/release/lockbox-invitation-service bootstrap
          zip invitation-service.zip bootstrap
          
          # Invitation Event Handler
          cp target/x86_64-unknown-linux-musl/release/invitation-event-service bootstrap
          zip invitation-event-handler.zip bootstrap

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'eu-west-2' }}
          
      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          sudo apt-get update && sudo apt-get install -y jq

      - name: Capture current stack outputs (if any)
        id: before
        run: |
          AWS_REGION="${{ secrets.AWS_REGION }}"; AWS_REGION="${AWS_REGION:-eu-west-2}"; export AWS_REGION
          if aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" >/dev/null 2>&1; then
            API_BEFORE=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='ApiURL'].OutputValue" --output text || true)
            USERPOOL_BEFORE=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text || true)
            CLIENT_BEFORE=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" --output text || true)
          else
            API_BEFORE=""; USERPOOL_BEFORE=""; CLIENT_BEFORE="";
          fi
          echo "api_before=$API_BEFORE" >> $GITHUB_OUTPUT
          echo "userpool_before=$USERPOOL_BEFORE" >> $GITHUB_OUTPUT
          echo "client_before=$CLIENT_BEFORE" >> $GITHUB_OUTPUT

      - name: Deploy with SAM
        run: |
          set -euo pipefail

          # Set AWS region from secrets or default to eu-west-2
          AWS_REGION="${{ secrets.AWS_REGION }}"
          AWS_REGION="${AWS_REGION:-eu-west-2}"
          echo "Using AWS region: $AWS_REGION"
          
          # Create S3 bucket for deployment if it doesn't exist
          BUCKET_NAME="lockbox-deployment-bucket-$AWS_REGION"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Deployment bucket '$BUCKET_NAME' already exists."
          else
            aws s3 mb "s3://$BUCKET_NAME" --region "$AWS_REGION"
          fi

          # Resolve Cognito User Pool parameter
          USER_POOL_ID="${{ secrets.COGNITO_USER_POOL_ID }}"
          if [ -z "$USER_POOL_ID" ]; then
            USER_POOL_ID="${{ steps.before.outputs.userpool_before }}"
            if [ -n "$USER_POOL_ID" ]; then
              echo "Using existing stack UserPoolId from previous deployment."
            fi
          fi

          PARAM_ARGS=""
          if [ -n "$USER_POOL_ID" ]; then
            PARAM_ARGS="--parameter-overrides ParameterKey=UserPoolId,ParameterValue=$USER_POOL_ID"
          else
            echo "::warning::No Cognito User Pool ID supplied via secrets and no previous stack output found. Falling back to template default."
          fi

          # Deploy using SAM with increased timeout for Cognito resources
          if [ -n "$PARAM_ARGS" ]; then
            sam deploy --template-file template.yaml \
              --stack-name lockbox-box-service \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
              --no-confirm-changeset \
              --s3-bucket "$BUCKET_NAME" \
              --region "$AWS_REGION" \
              --no-fail-on-empty-changeset \
              $PARAM_ARGS
          else
            sam deploy --template-file template.yaml \
              --stack-name lockbox-box-service \
              --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
              --no-confirm-changeset \
              --s3-bucket "$BUCKET_NAME" \
              --region "$AWS_REGION" \
              --no-fail-on-empty-changeset
          fi
            
      - name: Capture new stack outputs and enforce stability
        id: after
        run: |
          AWS_REGION="${{ secrets.AWS_REGION }}"; AWS_REGION="${AWS_REGION:-eu-west-2}"; export AWS_REGION
          echo "Getting stack outputs..."
          aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs" --output table || true
          API_AFTER=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='ApiURL'].OutputValue" --output text || true)
          USERPOOL_AFTER=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text || true)
          CLIENT_AFTER=$(aws cloudformation describe-stacks --stack-name lockbox-box-service --region "$AWS_REGION" --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" --output text || true)
          echo "API URL before:  '${{ steps.before.outputs.api_before }}'"
          echo "API URL after:   '$API_AFTER'"
          echo "UserPool before: '${{ steps.before.outputs.userpool_before }}'"
          echo "UserPool after:  '$USERPOOL_AFTER'"
          echo "Client before:   '${{ steps.before.outputs.client_before }}'"
          echo "Client after:    '$CLIENT_AFTER'"
          # Enforce that API URL and Cognito User Pool remain unchanged if they existed prior to deploy
          if [ -n "${{ steps.before.outputs.api_before }}" ] && [ "${{ steps.before.outputs.api_before }}" != "$API_AFTER" ]; then
            echo "::error::API URL changed from '${{ steps.before.outputs.api_before }}' to '$API_AFTER'. Aborting to prevent breaking clients." && exit 1
          fi
          if [ -n "${{ steps.before.outputs.userpool_before }}" ] && [ "${{ steps.before.outputs.userpool_before }}" != "$USERPOOL_AFTER" ]; then
            echo "::error::Cognito User Pool changed from '${{ steps.before.outputs.userpool_before }}' to '$USERPOOL_AFTER'. Aborting." && exit 1
          fi
          # Optional: enforce client ID stability too
          if [ -n "${{ steps.before.outputs.client_before }}" ] && [ "${{ steps.before.outputs.client_before }}" != "$CLIENT_AFTER" ]; then
            echo "::warning::Cognito App Client changed. Ensure frontend config is aligned."
          fi
