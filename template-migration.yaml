# MIGRATION TEMPLATE - USE THIS TO RECREATE TABLES WITH CORRECT SCHEMA
# 
# This template renames the logical resource IDs for the DynamoDB tables,
# which forces CloudFormation to create new tables and delete the old ones.
# 
# USAGE:
# 1. First backup your data: ./backup-dynamodb-tables.sh
# 2. Deploy this template: sam deploy --template-file template-migration.yaml ...
# 3. Restore your data: ./restore-dynamodb-tables.sh <backup-dir>
# 4. Deploy the normal template: sam deploy --template-file template.yaml ...
#
# The only difference from template.yaml is the resource names:
# - BoxesTable -> BoxesTableV2
# - InvitationsTable -> InvitationsTableV2

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lockbox Services - Box and Invitation Services (MIGRATION VERSION)

Parameters:
  UserPoolId:
    Type: String
    Default: eu-west-2_rdkfPgGg4
    Description: Existing Cognito User Pool ID to use

Resources:
  # Configure API Gateway for public access
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        AllowCredentials: false
      Auth:
        ApiKeyRequired: false
        
  # Lambda execution role with Cognito permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
                
  # Lambda Layer for shared dependencies (if we need one later)
  # SharedDependenciesLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: lockbox-shared-deps
  #     ContentUri: shared-layer/
  #     CompatibleRuntimes:
  #       - provided.al2

  BoxServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: box-service.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        ApiEventWithSubpaths:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BoxesTableV2
          RUST_LOG: info
          USER_POOL_ID: !Ref UserPoolId
          REMOVE_BASE_PATH: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoxesTableV2
        - DynamoDBCrudPolicy:
            TableName: !Ref InvitationsTableV2
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsers
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  InvitationServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: invitation-service.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        ApiEventWithSubpaths:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /invitations/{proxy+}
            Method: ANY
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          DYNAMODB_INVITATION_TABLE: !Ref InvitationsTableV2
          RUST_LOG: info
          SNS_TOPIC_ARN: !Ref LockboxEventsTopic
          USER_POOL_ID: !Ref UserPoolId
          REMOVE_BASE_PATH: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvitationsTableV2
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LockboxEventsTopic.TopicName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsers
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  # RENAMED: BoxesTable -> BoxesTableV2
  BoxesTableV2:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete  # Changed to Delete for migration
    UpdateReplacePolicy: Delete  # Changed to Delete for migration
    Properties:
      TableName: box-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: owner_id-index
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # RENAMED: InvitationsTable -> InvitationsTableV2
  InvitationsTableV2:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete  # Changed to Delete for migration
    UpdateReplacePolicy: Delete  # Changed to Delete for migration
    Properties:
      TableName: invitations-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: inviteCode
          AttributeType: S
        - AttributeName: boxId
          AttributeType: S
        - AttributeName: creatorId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: invite_code-index
          KeySchema:
            - AttributeName: inviteCode
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: box_id-index
          KeySchema:
            - AttributeName: boxId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: creatorId-index
          KeySchema:
            - AttributeName: creatorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # SNS Topic for Lockbox Events
  LockboxEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: lockbox-events
      DisplayName: Lockbox Events
      KmsMasterKeyId: alias/aws/sns
      
  InvitationEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: invitation-event-handler
      CodeUri: invitation-event-handler.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        InvitationEvents:
          Type: SNS
          Properties:
            Topic: !Ref LockboxEventsTopic
            FilterPolicy:
              eventType:
                - invitation_created
                - invitation_viewed
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BoxesTableV2
          RUST_LOG: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoxesTableV2

  # Backup configuration
  BackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores

  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub ${AWS::StackName}-backup-plan
        BackupPlanRule:
          - RuleName: DailyBackup
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: cron(0 5 ? * * *)
            StartWindowMinutes: 60
            CompletionWindowMinutes: 120
            Lifecycle:
              MoveToColdStorageAfterDays: 30
              DeleteAfterDays: 365

  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub ${AWS::StackName}-backup-vault
      EncryptionKeyArn: alias/aws/backup

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: !Sub ${AWS::StackName}-backup-selection
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/box-table
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/invitations-table

Outputs:
  BoxServiceFunction:
    Description: Box Service Function ARN
    Value: !GetAtt BoxServiceFunction.Arn
  InvitationServiceFunction:
    Description: Invitation Service Function ARN
    Value: !GetAtt InvitationServiceFunction.Arn
  InvitationEventHandlerFunction:
    Description: Invitation Event Handler Function ARN
    Value: !GetAtt InvitationEventHandlerFunction.Arn
  ApiURL:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  BoxesTableName:
    Description: Box DynamoDB Table Name
    Value: !Ref BoxesTableV2
  InvitationsTableName:
    Description: Invitations DynamoDB Table Name
    Value: !Ref InvitationsTableV2
  EventTopicArn:
    Description: SNS Topic ARN for Lockbox Events
    Value: !Ref LockboxEventsTopic