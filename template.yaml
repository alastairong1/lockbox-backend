AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lockbox Box Service - Manages digital lockboxes

Resources:
  # Configure API Gateway for public access
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  LockboxFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lockbox-box-service
      CodeUri: ./
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BoxesTable
          RUST_LOG: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoxesTable

  BoxesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: box-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: owner_id
          AttributeType: S
        # Note: We can't directly create a GSI for guardian IDs because they're stored
        # in a nested array within the item. Options for production scaling:
        # 1. Create a separate guardian-to-box mapping table
        # 2. Use DynamoDB Streams to maintain a flattened view of guardian relationships
        # 3. Use client-side filtering or sparse GSIs for specific guardian-related queries
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: owner_id-index
          KeySchema:
            - AttributeName: owner_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      # Enable point-in-time recovery for continuous backup
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Setup daily backups using AWS Backup
  BoxesTableBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub "${AWS::StackName}-boxes-backup-plan"
        BackupPlanRule:
          - RuleName: DailyBackupRule
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: "cron(0 5 * * ? *)" # Daily at 5:00 AM UTC
            StartWindowMinutes: 60 # Start backup within 60 minutes of scheduled time
            CompletionWindowMinutes: 180 # Complete within 3 hours
            Lifecycle:
              DeleteAfterDays: 30 # Keep backups for 30 days

  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub "${AWS::StackName}-backup-vault"

  BackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup

  BoxesTableBackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BoxesTableBackupPlan
      BackupSelection:
        SelectionName: !Sub "${AWS::StackName}-boxes-backup-selection"
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources:
          - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/box-table"

Outputs:
  LockboxFunction:
    Description: "Lockbox Function ARN"
    Value: !GetAtt LockboxFunction.Arn
  ApiURL:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BoxesTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref BoxesTable
