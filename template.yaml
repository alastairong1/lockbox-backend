AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lockbox Services - Box and Invitation Services

Parameters:
  UserPoolId:
    Type: String
    Default: eu-west-2_rdkfPgGg4
    Description: Existing Cognito User Pool ID to use
  

Resources:
  # Configure API Gateway for public access
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
        AddDefaultAuthorizerToCorsPreflight: false

  # User Pool Client for Amplify integration
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: LockboxAmplifyClient
      UserPoolId: !Ref UserPoolId
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        RefreshToken: days
        AccessToken: hours
        IdToken: hours
      # Add OAuth settings for Google and Apple sign-in
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - profile
        - openid
      CallbackURLs:
        - "com.alastairong.lockbox://callback/"
      LogoutURLs:
        - "com.alastairong.lockbox://signout/"
      SupportedIdentityProviders:
        - COGNITO
        - Google
        - SignInWithApple

  # Add a domain for the user pool
  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties:
  #     Domain: !Sub "lockbox-${AWS::AccountId}"
  #     UserPoolId: !Ref UserPoolId

  BoxServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: box-service.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        ApiEventWithSubpaths:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /boxes/{proxy+}
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BoxesTable
          RUST_LOG: info
          COGNITO_USER_POOL_ID: !Ref UserPoolId
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoxesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InvitationsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsers
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  InvitationServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: invitation-service.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        # Public endpoint for viewing invitations (no auth required)
        ViewInvitationPublic:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /invitations/view/{code}
            Method: GET
            Auth:
              Authorizer: NONE
        # All other invitation endpoints (auth required)
        ApiEventWithSubpaths:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /invitations/{proxy+}
            Method: ANY
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DYNAMODB_INVITATION_TABLE: !Ref InvitationsTable
          RUST_LOG: info
          COGNITO_USER_POOL_ID: !Ref UserPoolId
          COGNITO_APP_CLIENT_ID: !Ref UserPoolClient
          SNS_TOPIC_ARN: !Ref LockboxEventsTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvitationsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LockboxEventsTopic.TopicName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsers
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  BoxesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: box-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
        # Note: We can't directly create a GSI for guardian IDs because they're stored
        # in a nested array within the item. Options for production scaling:
        # 1. Create a separate guardian-to-box mapping table
        # 2. Use DynamoDB Streams to maintain a flattened view of guardian relationships
        # 3. Use client-side filtering or sparse GSIs for specific guardian-related queries
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: owner_id-index
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      # Enable point-in-time recovery for continuous backup
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  InvitationsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: invitations-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: inviteCode
          AttributeType: S
        - AttributeName: boxId
          AttributeType: S
        - AttributeName: creatorId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: invite_code-index
          KeySchema:
            - AttributeName: inviteCode
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: box_id-index
          KeySchema:
            - AttributeName: boxId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: creatorId-index
          KeySchema:
            - AttributeName: creatorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      # Enable point-in-time recovery for continuous backup
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # SNS Topic for Lockbox Events
  LockboxEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: lockbox-events
      DisplayName: Lockbox Events
      KmsMasterKeyId: alias/aws/sns # Enable server-side encryption
      
  # Lambda function to process invitation events and update box records
  InvitationEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: invitation-event-handler
      CodeUri: invitation-event-handler.zip
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        InvitationEvents:
          Type: SNS
          Properties:
            Topic: !Ref LockboxEventsTopic
            FilterPolicy:
              eventType:
                - invitation_created
                - invitation_viewed
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BoxesTable
          RUST_LOG: info
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BoxesTable

  # Setup daily backups using AWS Backup
  BoxesTableBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub "${AWS::StackName}-boxes-backup-plan"
        BackupPlanRule:
          - RuleName: DailyBackupRule
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: "cron(0 5 * * ? *)" # Daily at 5:00 AM UTC
            StartWindowMinutes: 60 # Start backup within 60 minutes of scheduled time
            CompletionWindowMinutes: 180 # Complete within 3 hours
            Lifecycle:
              DeleteAfterDays: 30 # Keep backups for 30 days

  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub "${AWS::StackName}-backup-vault"

  BackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup

  BoxesTableBackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BoxesTableBackupPlan
      BackupSelection:
        SelectionName: !Sub "${AWS::StackName}-boxes-backup-selection"
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources:
          - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/box-table"
          - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/invitations-table"

Outputs:
  BoxServiceFunction:
    Description: "Box Service Function ARN"
    Value: !GetAtt BoxServiceFunction.Arn
  InvitationServiceFunction:
    Description: "Invitation Service Function ARN"
    Value: !GetAtt InvitationServiceFunction.Arn
  InvitationEventHandlerFunction:
    Description: "Invitation Event Handler Function ARN"
    Value: !GetAtt InvitationEventHandlerFunction.Arn
  ApiURL:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BoxesTableName:
    Description: "Box DynamoDB Table Name"
    Value: !Ref BoxesTable
  InvitationsTableName:
    Description: "Invitation DynamoDB Table Name"
    Value: !Ref InvitationsTable
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPoolId
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
  # UserPoolDomain:
  #   Description: "Cognito User Pool Domain"
  #   Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
  LockboxEventsTopicArn:
    Description: "Lockbox Events SNS Topic ARN"
    Value: !Ref LockboxEventsTopic